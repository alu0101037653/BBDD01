SQL> CREATE PROCEDURE CONTAR(DIA NUMBER) IS
  2  MES NUMBER;
  3  BEGIN
  4  LOOP
  5  MES := DIA * 31;
  6  EXIT WHEN MES > 400;
  7  END LOOP;
  8  DBMS_OUTPUT.PUT_LINE(MES);
  9* END;
SQL> /

Procedure created.

SQL> CALL CONTAR(13);
403

Call completed.

SQL> 







SQL> CREATE PROCEDURE PAL(X NUMBER) IS
  2  R VARCHAR2(100);
  3  BEGIN
  4  CASE
  5  WHEN X=1 THEN R:= 'HOLA';
  6  WHEN X=2 THEN R:= 'QUE TAL';
  7  ELSE R:= 'ADIOS';
  8  END CASE;
  9  DBMS_OUTPUT.PUT_LINE(R);
 10* END;
SQL> /

Procedure created.

SQL> CALL PAL(1);
HOLA

Call completed.
















SQL> CREATE PROCEDURE SOL(X NUMBER) IS
  2  R VARCHAR2(100);
  3  BEGIN
  4  IF X=1 THEN
  5  R:= 'HOLA';
  6  ELSIF X =2 THEN
  7  R:= 'QUE TAL';
  8  ELSE
  9  R:= 'ADIOS';
 10  END IF;
 11  DBMS_OUTPUT.PUT_LINE(R);
 12* END;
SQL> /

Procedure created.

SQL> CALL SOL(2);
QUE TAL

Call completed.











SQL> DECLARE
  2  AR NUMBER;
  3  BEGIN
  4  SELECT COUNT(CAR) INTO AR
  5  FROM AREA;
  6  DBMS_OUTPUT.PUT_LINE(AR);
  7  END
  8* ;
SQL> /
8

PL/SQL procedure successfully completed.










SQL> VARIABLE contador VARCHAR2(2);
SQL> SELECT COUNT(CD) INTO :contador
  2  FROM DEPARTAMENTO;

 COUNT(CD)
----------
	 4









SQL> DECLARE
  2  SUBTYPE FECHA IS DATE NOT NULL;
  3  PFDATE FECHA := SYSDATE;
  4  BEGIN
  5  DBMS_OUTPUT.PUT_LINE(PFDATE);
  6  END;
  7  /
16-JAN-19

PL/SQL procedure successfully completed.

















SQL> LIST
SP2-0223: No lines in SQL buffer.
SQL> INPUT HOLA
SQL> LIST
  1* HOLA
SQL> APPEND QUE TAL
  1* HOLAQUE TAL
SQL> CHANGE QUE TAL
  2* HOLAQ
SQL> DEL
SQL> LIST
SP2-0223: No lines in SQL buffer. 
SQL> INPUT ADIOS
SQL> SAVE file.lst
Created file .lst
SQL> GET file.lst
  1* ADIOS


SQL> DESCRIBE PROFESOR;
 Name					   Null?    Type
 ----------------------------------------- 
 DNI					   NOT NULL NUMBER(8)
 P						            VARCHAR2(60)
 CAR						          NUMBER(3)
 CAT						          VARCHAR2(5)


SQL> HELP

 HELP
 ----

 Accesses this command line help system. Enter HELP INDEX or ? INDEX
 for a list of topics.

 You can view SQL*Plus resources at
     http://www.oracle.com/technology/documentation/

 ******************************************************************************
 
 
 SQL> DEFINE PELICULA = "BAYWATCH"
SQL> DEFINE PELICULA
DEFINE PELICULA        = "BAYWATCH" (CHAR)

 **  Top 12.2 features:                                                      **
 **    - Fast retrieval of data as CSV for use in applications like          **
 **      SQL*Loader. Use SQLPLUS -M "CSV ON" or SET MARKUP CSV ON            **
 **    - Improved defaults and optimizations for reports. Use SQLPLUS -F     **
 **    - Command recall. Use SET HISTORY ON and HISTORY to list previous     **
 **      commands.                                                           **
 ******************************************************************************

 HELP|? [topic]
 
SQL> 



SQL> PAUSE HOLA
HOLA

SQL> PROMPT HOLA
HOLA


SQL> TTI HOLA
SQL> TTI
ttitle ON and is the following 4 characters:
HOLA
SQL> BTI ADIOS
SQL> BTI
btitle ON and is the following 5 characters:
ADIOS

SQL> HOST pwd
/home/siga01.stic.ull.es/fd/alu0101037653


SQL> SHOW USER
USER is "ALU0101037653"

SQL> INPUT HOLA
SQL> LIST
  1* HOLA
SQL> APPEND  QUE TAL
  1* HOLA QUE TAL
SQL> CHANGE /QUE TAL/ADIOS
  1* HOLA ADIOS
SQL> DEL
SQL> LIST
SP2-0223: No lines in SQL buffer.
SQL> INPUT ADIOS
SQL> SAVE arch.lst
Created file arch.lst
SQL> GET arch.lst
  1* ADIOS
SQL> 



SQL> DISCONNECT
Disconnected from Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production
SQL> EXIT
alu0101037653@c2:~$ 






SQL> VARIABLE areas VARCHAR2(15);
SQL> PRINT areas;

AREAS
--------------------------------------------------------------------------------


SQL> DECLARE
  2  VALOR_NEGATIVO EXCEPTION;
  3  VALOR NUMBER;
  4  BEGIN
  5  VALOR := -1;
  6  IF VALOR < 0 THEN
  7  RAISE VALOR_NEGATIVO;
  8  END IF;
  9  EXCEPTION
 10  WHEN VALOR_NEGATIVO THEN
 11  dbms_output.put_line('El valor no puede ser negativo');
 12  END;
 13  /
El valor no puede ser negativo

PL/SQL procedure successfully completed.






SQL> DECLARE
  2  CURSOR nombre_dep IS
  3  SELECT CD, COUNT(CD)
  4  FROM AREA
  5  GROUP BY CD
  6  ORDER BY COUNT(CD) DESC;
  7  tercer_dep AREA.CD%TYPE;
  8  variab NUMBER(2);
  9  nom DEPARTAMENTO.D%TYPE;
 10  BEGIN
 11  OPEN nombre_dep;
 12  FOR I IN 1..3 LOOP
 13  FETCH nombre_dep INTO tercer_dep, variab;
 14  END LOOP;
 15  SELECT D
 16  INTO nom
 17  FROM DEPARTAMENTO
 18  WHERE CD=tercer_dep;
 19  DBMS_OUTPUT.PUT_LINE('Departamento: ' || nom);
 20  CLOSE nombre_dep;
 21* END;
SQL> /
Departamento: MATEMATICA FUNDAMENTAL

PL/SQL procedure successfully completed.

SQL> 

